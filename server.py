from flask import Flask, request, jsonify
from educhain.engines.content_engine import ContentEngine
from educhain.core.config import LLMConfig
import json
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)

# Use Gemini as the LLM
llm_config = LLMConfig(model_name="gemini-1.5-flash", api_key=None)
engine = ContentEngine(llm_config=llm_config)

@app.route("/generate-mcqs", methods=["POST"])
def generate_mcqs():
    print("[LOG] /generate-mcqs endpoint hit")
    data = request.json
    print(f"[LOG] Request data: {data}")
    topic = data.get("topic", "")
    count = data.get("count", 5)
    try:
        questions = engine.generate_flashcards(topic=topic, num=count)
        print(f"[LOG] Generated questions: {questions}")
        response = jsonify(questions.dict())
        print(f"[LOG] Returning response: {response.get_data(as_text=True)}")
        return response
    except Exception as e:
        print(f"[ERROR] Exception in /generate-mcqs: {e}")
        return jsonify({"error": str(e)}), 500

@app.route("/lesson-plan", methods=["POST"])
def lesson_plan():
    data = request.json
    subject = data.get("subject", "")
    try:
        plan = engine.generate_lesson_plan(topic=subject)
        plan_dict = plan.dict()
        plan_dict["mcp_marker"] = "Generated by EduChain MCP"
        return jsonify(plan_dict)
    except Exception as e:
        print(f"[ERROR] Exception in /lesson-plan: {e}")
        return jsonify({"error": str(e)}), 500

@app.route("/flashcards", methods=["POST"])
def flashcards():
    data = request.json
    topic = data.get("topic", "")
    count = data.get("count", 5)
    try:
        cards = engine.generate_flashcards(topic=topic, num=count)
        return jsonify(cards.dict())
    except Exception as e:
        print(f"[ERROR] Exception in /flashcards: {e}")
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    print("üöÄ Starting EduChain Server...")
    print("üåê Server running at: http://localhost:5001")
    app.run(port=5001, debug=True) 